// <auto-generated />
using System;
using BM.DataAccess.DbContexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BM.API.Migrations
{
    [DbContext(typeof(BMContext))]
    [Migration("20210717090120_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.8");

            modelBuilder.Entity("BM.DataAccess.Entities.Role", b =>
                {
                    b.Property<Guid>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("RoleId");

                    b.ToTable("Role");

                    b.HasData(
                        new
                        {
                            RoleId = new Guid("5b1c2b4d-48c7-402a-80c3-cc796ad49c6b"),
                            Name = "Interviewer"
                        },
                        new
                        {
                            RoleId = new Guid("d8663e5e-7494-4f81-8739-6e0de1bea7ee"),
                            Name = "Candidate"
                        });
                });

            modelBuilder.Entity("BM.DataAccess.Entities.Slot", b =>
                {
                    b.Property<Guid>("SlotId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateEnd")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateStart")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("SlotId");

                    b.HasIndex("UserId");

                    b.ToTable("Slots");

                    b.HasData(
                        new
                        {
                            SlotId = new Guid("d173e20d-159e-4127-9ce9-b0ac2564ad97"),
                            DateEnd = new DateTime(2021, 7, 19, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            DateStart = new DateTime(2021, 7, 19, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = new Guid("d28888e9-2ba9-473a-a40f-e38cb54f9b35")
                        },
                        new
                        {
                            SlotId = new Guid("40ff5488-fdab-45b5-bc3a-14302d59869a"),
                            DateEnd = new DateTime(2021, 7, 19, 11, 0, 0, 0, DateTimeKind.Unspecified),
                            DateStart = new DateTime(2021, 7, 19, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = new Guid("d28888e9-2ba9-473a-a40f-e38cb54f9b35")
                        },
                        new
                        {
                            SlotId = new Guid("52c5b675-319f-4302-8076-1fd5d8eb9ccc"),
                            DateEnd = new DateTime(2021, 7, 19, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            DateStart = new DateTime(2021, 7, 19, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = new Guid("44fe7cef-31d0-41ea-a113-41d0de131f97")
                        },
                        new
                        {
                            SlotId = new Guid("ad1afa51-0514-427b-a53a-790b28b0168f"),
                            DateEnd = new DateTime(2021, 7, 20, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            DateStart = new DateTime(2021, 7, 20, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = new Guid("44fe7cef-31d0-41ea-a113-41d0de131f97")
                        });
                });

            modelBuilder.Entity("BM.DataAccess.Entities.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("d28888e9-2ba9-473a-a40f-e38cb54f9b35"),
                            Name = "Mary",
                            RoleId = new Guid("5b1c2b4d-48c7-402a-80c3-cc796ad49c6b")
                        },
                        new
                        {
                            UserId = new Guid("44fe7cef-31d0-41ea-a113-41d0de131f97"),
                            Name = "John",
                            RoleId = new Guid("d8663e5e-7494-4f81-8739-6e0de1bea7ee")
                        });
                });

            modelBuilder.Entity("BM.DataAccess.Entities.Slot", b =>
                {
                    b.HasOne("BM.DataAccess.Entities.User", "User")
                        .WithMany("AvailableSlots")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BM.DataAccess.Entities.User", b =>
                {
                    b.HasOne("BM.DataAccess.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("BM.DataAccess.Entities.User", b =>
                {
                    b.Navigation("AvailableSlots");
                });
#pragma warning restore 612, 618
        }
    }
}
